const Joi = require('joi')

module.exports = {
  base: Joi.string().regex(/^data:[^,]*,.+$/),
  name: 'dataURI',
  language: {
    mediatype: 'needs to have provided mediatype',
    base64: 'needs to be base64 encoded',
    charset: 'needs to have provided charset, or a charset defined if none is provided'
  },
  pre: function (value, state, options) {
    try {
      let metadata = (value.match(/^data:([^,]+)/) || ['', ''])[1]

      let mediatype = (metadata.match(/^[^;]+/) || [null])[0]

      let charset = (metadata.match(/;charset=([^,]+)$/) || [null, null])[1]

      let isBase64 = !!metadata.match(/base64$/)

      let data = (value.match(/^data:[^,]*,(.*)$/) || [null, null])[1]

      if (!data || !data.length) {
        throw new Error('a valid data URI must have data defined')
      }

      this._mediatype = mediatype
      this._charset = charset
      this._isBase64 = isBase64
      this._data = data

      return value
    } catch (exc) {
      return this.createError('dataURI', { v: value }, state, options)
    }
  },
  rules: [
    {
      name: 'mediatype',
      params: {
        mediatype: Joi.string().optional()
      },
      validate: function (params, value, state, options) {
        // TODO: whether or not an expected mediatype is provided, validate against generally acceptable mediatypes
        if ((!params.mediatype && this._mediatype) || params.mediatype === this._mediatype) {
          return value
        } else {
          return this.createError('dataURI.mediatype', { v: value, expectedMediatype: params.mediatype, mediatype: this._mediatype }, state, options)
        }
      }
    },
    {
      name: 'base64',
      validate: function (params, value, state, options) {
        if (this._isBase64) {
          return value
        } else {
          return this.createError('dataURI.base64', { v: value }, state, options)
        }
      }
    },
    {
      name: 'charset',
      params: {
        charset: Joi.string().optional()
      },
      validate: function (params, value, state, options) {
        if ((!params.charset && this._charset) || params.charset === this._charset) {
          return value
        } else {
          return this.createError('dataURI.charset', { v: value, expectedCharset: params.charset, charset: this._charset }, state, options)
        }
      }
    }
  ]
}
