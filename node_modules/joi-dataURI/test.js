/* global describe, it */
const dataUri = require('./index.js')
const Joi = require('joi').extend(dataUri)
const assert = require('assert')

let getDataURI = function (data, mediatype, useBase64, charset) {
  let buffer
  mediatype = mediatype || ''
  charset = charset || ''

  if (typeof data === 'string') {
    buffer = new Buffer(data)
  } else if (data instanceof Buffer) {
    buffer = data
  } else {
    throw new Error('only strings and buffers are supported as input')
  }

  buffer = buffer || new Buffer([])
  return 'data:' + mediatype + (useBase64 ? ';base64,' : (charset ? `;charset=${charset},` : ',')) + buffer.toString((useBase64 ? 'base64' : undefined))
}

const exampleDataURI = getDataURI('hello world', 'text/plain')

describe('Joi.dataURI', function () {
  it('should reject a non-data URI string', function () {
    assert.notEqual(Joi.validate('hello world', Joi.dataURI()).error, null, 'a plaintext string should be rejected')
  })

  it('should pass a string containing a valid data URI', function () {
    assert.equal(Joi.validate(getDataURI('hello world', 'text/plain'), Joi.dataURI()).error, null, 'a valid data URI with plaintext data should pass validation')

    assert.equal(Joi.validate(getDataURI('hello world', 'text/plain', true), Joi.dataURI()).error, null, 'a valid data URI with base64 encoded data should pass validation')
  })

  it('a valid data URI with a no mediatype should pass', function () {
    assert.equal(Joi.validate(exampleDataURI, Joi.dataURI()).error, null)
  })

  it('should reject a string with proper data URI prefix but no data', function () {
    assert.notEqual(Joi.validate(getDataURI(new Buffer([]), 'application/octet-stream'), Joi.dataURI()).error, null)
  })

  describe('Joi.dataURI.mediatype', function () {
    it('if a mediatype is provided, should reject a valid data URI with a different mediatype', function () {
      assert.notEqual(Joi.validate(exampleDataURI, Joi.dataURI().mediatype('text/csv')).error, null)
    })

    it('should reject a valid data URI with no mediatype', function () {
      assert.notEqual(Joi.validate(getDataURI('hello world'), Joi.dataURI().mediatype()).error, null)
    })
  })

  describe('Joi.dataURI.base64', function () {
    it('should reject a data URI which is not base64 encoded', function () {
      assert.notEqual(Joi.validate(getDataURI('hello world', 'application/octet-stream', false), Joi.dataURI().base64()).error, null)
    })
    it('should pass a data URI which is base64 encoded', function () {
      assert.equal(Joi.validate(getDataURI('hello world', 'application/octet-stream', true), Joi.dataURI().base64()).error, null)
    })
  })

  describe('Joi.dataURI.charset', function () {
    it('should reject a data URI which does not have provided charset (UTF-8)', function () {
      let utf16example = getDataURI('hello world', 'text/plain', false, 'UTF-16')
      assert.notEqual(Joi.validate(utf16example, Joi.dataURI().charset('UTF-8')).error, null)
    })
    it('should pass a data URI which has provided charset (UTF-8)', function () {
      let utf8example = getDataURI('hello world', 'text/plain', false, 'UTF-8')
      assert.equal(Joi.validate(utf8example, Joi.dataURI().charset('UTF-8')).error, null)
    })
    it('should still reject a data URI with no charset, if no charset is provided', function () {
      let noCharsetExample = getDataURI('hello world', 'text/plain', false)
      assert.notEqual(Joi.validate(noCharsetExample, Joi.dataURI().charset('UTF-8')).error, null)
    })
  })
})
